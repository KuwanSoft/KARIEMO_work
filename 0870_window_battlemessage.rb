#==============================================================================
# ■ WindowBattleMessage
#------------------------------------------------------------------------------
# 　戦闘中に表示するメッセージウィンドウです。通常のメッセージウィンドウの機能
# に加え、戦闘進行のナレーションを表示する機能を持ちます。
#==============================================================================
class WindowBattleMessage < WindowMessage
MAXLINE = 4 # 4行を最大とする
MOVE_VELOCITY = 12 # 行移動速度
ROW_HEIGHT = WLH*2-4
  #--------------------------------------------------------------------------
  # ● オブジェクト初期化
  #--------------------------------------------------------------------------
  def initialize
    # super(0, 300+4, 512, WLH*8+32)
    super(0, 0, 512, WLH*7+32)
    self.visible = false
    self.openness = 255
    self.opacity = 255
    self.back_opacity = 255
    self.z = 255
    @lines = []
    refresh
  end
  #--------------------------------------------------------------------------
  # ● 解放
  #--------------------------------------------------------------------------
  def dispose
    super
  end
  #--------------------------------------------------------------------------
  # ● フレーム更新
  #--------------------------------------------------------------------------
  def update
    super
  end
  #--------------------------------------------------------------------------
  # ● ウィンドウを開く (無効化)
  #--------------------------------------------------------------------------
  def open
  end
  #--------------------------------------------------------------------------
  # ● ウィンドウを閉じる (無効化)
  #--------------------------------------------------------------------------
  def close
  end
  #--------------------------------------------------------------------------
  # ● ウィンドウの背景と位置の設定 (無効化)
  #--------------------------------------------------------------------------
  def reset_window
  end
  #--------------------------------------------------------------------------
  # ● クリア
  #--------------------------------------------------------------------------
  def clear
    @lines.clear
    refresh
  end
  #--------------------------------------------------------------------------
  # ● 行数の取得
  #--------------------------------------------------------------------------
  def line_number
    return @lines.size
  end
  #--------------------------------------------------------------------------
  # ● 一行戻る
  #--------------------------------------------------------------------------
  def back_one
    @lines.pop
    refresh
  end
  #--------------------------------------------------------------------------
  # ● 指定した行に戻る
  #     line_number : 行番号
  #--------------------------------------------------------------------------
  def back_to(line_number)
    while @lines.size > line_number
      @lines.pop
    end
    refresh
  end
  #--------------------------------------------------------------------------
  # ● 改ページ処理(オーバーライド)
  #--------------------------------------------------------------------------
  def new_page
    contents.clear
    @contents_x = 0
    cnt = 0
    @contents_y = 0
    @line_count = 0
    @show_fast = false
    @line_show_fast = false
    @pause_skip = false
    contents.font.color = text_color(0)
  end
  #--------------------------------------------------------------------------
  # ● 文章の追加
  #     text : 追加する文章
  #--------------------------------------------------------------------------
  # def add_instant_text(text)
  #   back_to(0) if line_number == 8  # 行がフルの場合、行頭に戻る
  #   @lines.push(text)
  #   refresh
  # end
  #--------------------------------------------------------------------------
  # ● 文章の置き換え
  #     text : 置き換える文章
  #    最下行を別の文章に置き換える。
  #--------------------------------------------------------------------------
  def replace_instant_text(text)
    @lines.pop
    @lines.push(text)
    refresh
  end
  #--------------------------------------------------------------------------
  # ● 最下行の文章の取得
  #--------------------------------------------------------------------------
  def last_instant_text
    return @lines[-1]
  end
  #--------------------------------------------------------------------------
  # ● リフレッシュ
  #--------------------------------------------------------------------------
  def refresh
    self.contents.clear
    for i in 0...@lines.size
      draw_line(i)
    end
  end
  #--------------------------------------------------------------------------
  # ● 行の描画
  #     index : 行番号
  #--------------------------------------------------------------------------
  def draw_line(index)
    rect = Rect.new(0, 0, 0, 0)
    rect.x += 0
    rect.y += index * ROW_HEIGHT
    rect.width = contents.width
    rect.height = ROW_HEIGHT
    self.contents.clear_rect(rect)
    self.contents.font.color = normal_color
    self.contents.draw_text(rect, @lines[index], 1) # 中央ぞろえ
    Debug::write(c_m,"Message:#{@lines[index]}")
  end
  #--------------------------------------------------------------------------
  # ● あたらしい行の描画方法
  #--------------------------------------------------------------------------
  def add_instant_text(message)
    shift_contents if @lines.size == MAXLINE
    @lines.push(message)
    @lines.shift if @lines.size > MAXLINE
    for i in 0...@lines.size
      draw_line(i)
    end
  end
  #--------------------------------------------------------------------------
  # ● 行のアニメーション
  #--------------------------------------------------------------------------
  def shift_contents
    original_y = self.oy
    loop do
      Graphics.update
      self.oy += MOVE_VELOCITY
      if (self.oy - original_y) > 24
        break
      end
    end
    self.oy = original_y
  end
end
